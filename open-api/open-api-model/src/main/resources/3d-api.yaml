---
openapi: 3.0.0
info:
  title: Pack API reference
  description: |
    Pack boxes into containers
  version: 1.0.0
paths:
  /pack:
    post:
      summary: Pack an order
      description: |
        Pack an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PackRequest"
      responses:
        "200":
          description: Pack response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackResponse"

components:
  schemas:

    Surface:
      type: string
      enum:
        - front
        - frontAtZeroDegrees
        - frontAtNinetyDegrees
        - rear
        - rearAtZeroDegrees
        - backAtNinetyDegrees
        - left
        - leftAtZeroDegrees
        - leftAtNinetyDegrees
        - right
        - rightAtZeroDegrees
        - rightAtNinetyDegrees
        - top
        - topAtZeroDegrees
        - topAtNinetyDegrees
        - bottom
        - bottomAtZeroDegrees
        - bottomAtNinetyDegrees
        - all

    PackedContainer:
      type: object
      properties:
        id:
          type: string
        dx:
          type: integer
        dy:
          type: integer
        dz:
          type: integer
        weight:
          type: integer

    PackedBox:
      type: object
      properties:
        id:
          type: string
        x:
          type: integer
        y:
          type: integer
        z:
          type: integer
        dx:
          type: integer
        dy:
          type: integer
        dz:
          type: integer
        weight:
          type: integer

    Stackable:
      type: object
      discriminator:
        propertyName: stackableSizeType
        mapping:
          box: "#/components/schemas/Box"
          container: "#/components/schemas/Container"      
      properties:
        id:
          type: string
        description:
          type: string
        dx:
          type: integer
        dy:
          type: integer
        dz:
          type: integer
        surfaces:
          type: array
          items: 
            $ref: '#/components/schemas/Surface'

    Box:
       allOf:
        - $ref: "#/components/schemas/Stackable"
        - type: object    
          properties:
            weight:
              type: integer

    Container:
       allOf:
        - $ref: "#/components/schemas/Stackable"
        - type: object    
          properties:
            loadDx:
              type: integer
            loadDy:
              type: integer
            loadDz:
              type: integer
            minLoadWeight:
              type: integer
            maxLoadWeight:
              type: integer
            emptyWeight:
              type: integer
              
    StackableItem:
      type: object
      discriminator:
        propertyName: stackableType
        mapping:
          box: "#/components/schemas/BoxItem"
          container: "#/components/schemas/ContainerItem"      
      properties:
        count:
          type: integer

    ContainerItem:
      allOf:
        - $ref: "#/components/schemas/StackableItem"
        - type: object    
          properties:
            container:
              $ref: '#/components/schemas/Container'    

    BoxItem:
      allOf:
        - $ref: "#/components/schemas/StackableItem"
        - type: object    
          properties:
            box:
              $ref: '#/components/schemas/Box'

    Packager:
      type: object
      properties:
        id:
          type: string
        maxDurationInPercent:
          type: integer
          
    PackResult:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/PackedContainer'
        boxes:
          type: array
          items:
            $ref: '#/components/schemas/PackedBox'

    PackResponse:
      type: object
      properties:
        status:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/PackResult'
            
    PackRequest:
      type: object
      properties:
        deadline:
          type: integer
          format: int64
        maxContainers:
          type: integer
        maxDuration:
          type: integer
        containerItems:
          type: array
          items:
            $ref: '#/components/schemas/ContainerItem'
        boxItems:
          type: array
          items:
            $ref: '#/components/schemas/BoxItem'
        packagers:
          type: array
          items:
            $ref: '#/components/schemas/Packager'
